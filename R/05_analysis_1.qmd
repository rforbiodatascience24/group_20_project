---
title: "05_analysis_1"
author: Antoine Andréoletti (s242830), Olivier Gaufrès (s243252), Amy Surry (s201902), Lea Skytthe (s203531), Trine Søgaard (s204655)
format:
  html:
    embed-resources: true
editor: visual
---

# PCA

## Libraries

```{r}
#| label: load-libraries
#| message: False
#| warning: False

rm(list=ls())

library("tidyverse")
library("ggrepel")
library("broom")
```

## Load data

Load meta and count data

```{r}
#| label: load-metadata

data_pheno <- read.csv("../data/03_metadata_aug.csv")

# We want patients as row names, so we convert the tibble to a dataframe and names the rows
data_pheno <- data.frame(data_pheno) |> 
  column_to_rownames("source_name")
```

```{r}
#| label: load-count_data

data_counts.total <- read.csv("../data/03_count_data_wide_aug.csv") |>
  dplyr::mutate(transcript_ID = str_c(transcript_ID, 
                                      runif(n = length(transcript_ID)))) |> 
  column_to_rownames("transcript_ID")


# We want genes as row names, so we convert the tibble to a dataframe and names the rows
data_counts <- data.frame(data_counts.total) |>
  dplyr::select(-gene_id, -gene_symbol)

colnames(data_counts) <- colnames(data_counts) |> 
  substring(2)

# The output of the mapping algorithm they use is an estimated number of reads mapped to each gene. It is a float while we need an integer. We will then convert it.
data_counts <- data_counts |> 
  mutate(across(where(is.numeric), as.integer))
```

## The Principal Component Analysis

Performing PCA

```{r}
#| label: pca-individual
#| warning: false

# Transpose the counts matrix to have the PCA for individuals and not gene expression
pca <- prcomp(t(data_counts))

# Proportion of variance
PoV <- pca$sdev^2/sum(pca$sdev^2)
PoV <- PoV * 100
PoV <- str_sub(PoV,1,4)
PC1_t = str_c("PC1 (", PoV[1] , "%)")
PC2_t = str_c("PC2 (", PoV[2] ,"%)")

# Add patients metadata
bind_cols(data_pheno, pca$x) |>  
  ggplot(aes(x=PC1, 
             y=PC2, 
             shape=clinical_information, 
             col=disease, 
             label=individual)) + 
  geom_point() + 
  geom_text_repel() +
  labs(title = "PCA of the expression of patients",
       x = PC1_t , 
       y = PC2_t, 
       color = "Disease", 
       shape = "Clinical information") +
  theme(plot.title = element_text(hjust = 0.5))
```
