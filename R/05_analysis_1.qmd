## PCA

#### Libraries

```{r}
#| label: load-libraries
#| message: False
#| warning: False

rm(list=ls())

library("tidyverse")
library("broom")  # devtools::install_github("tidymodels/broom")
library("cowplot")
library("ggrepel")
```

#### Data load

```{r}
#| label: load-metadata

data_pheno <- read.csv("../data/03_metadata_aug.csv")
```

```{r}
#| label: load-counts

data_counts.total <- read.csv("../data/03_count_data_wide_aug.csv")

# We want genes as row names, so we convert the tibble to a dataframe and names the rows
data_counts <- data.frame(data_counts.total) |>
  dplyr::select(-gene_id, -gene_symbol, -transcript_ID)

colnames(data_counts) <- colnames(data_counts) |> 
  substring(2)

# The output of the mapping algorithm they use is an estimated number of reads mapped to each gene. It is a float while we need an integer. We will then convert it.
data_counts <- data_counts |> 
  mutate(across(where(is.numeric), as.integer))
```

We would like to:

1.  Look at the data in PC coordinates.

2.  Look at the rotation matrix.

3.  Look at the variance explained by each PC.

#### The data in PC coordinates

```{r}
#| label: applying-pca

pca_fit <- data_counts |>
  scale() |> # scaling data
  t() |> # transpose data
  prcomp() # make the PCA

pca_fit |>
  augment(data_pheno) |> # add metadata
  ggplot(aes(x = .fittedPC1, 
             y = .fittedPC2, 
             shape = clinical_information,
             col = disease, 
             label = source_name)) + 
    geom_point() + 
    labs(title = "PCA of the expression of patients",
         x = "PC1" , 
         y = "PC2", 
         color = "Disease", 
         shape = "Clinical information") +
    theme(plot.title = element_text(hjust = 0.5))
```

It is hard to split our patients just using a PCA, we will have to use other tools to look at differences in gene expression between the groups.

#### The rotation matrix

```{r}
#| label: rotation-matrix

# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, 
  ends = "first", 
  type = "closed", 
  length = grid::unit(8, "pt")
)

# Lets keep only the genes with biggest impact on the PCA
PC1_sorted <- pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", 
              names_prefix = "PC", 
              values_from = "value") |> 
  mutate(PC1 = abs(PC1)) |> 
  arrange(desc(PC1)) |> 
  pull(PC1)

biggest_value_PC1 <- PC1_sorted[10]

# plot rotation matrix
pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(names_from = "PC", 
              names_prefix = "PC", 
              values_from = "value") |>
  mutate(column = data_counts.total$gene_symbol) |> 
  filter(PC1 > biggest_value_PC1 | PC1 < - biggest_value_PC1,
         PC2 > biggest_value_PC1 | PC2 < - biggest_value_PC1) |> 
  ggplot(aes(x = PC1, 
             y = PC2)) +
  geom_segment(xend = 0, 
               yend = 0, 
               arrow = arrow_style) +
  geom_text(
    aes(label = column),
    color = "#56B4E9"
  ) +
  coord_fixed() +
  labs(title = "Rotation matrix of most impactful genes") +
  theme(plot.title = element_text(hjust = 0.5))
```

#### The variance by each PC

```{r}
#| label: variance-of-components

pca_fit |>
  tidy(matrix = "eigenvalues") |>
  filter(percent > 0.005) |> 
  ggplot(aes(x = PC, 
             y = percent)) +
  geom_col(fill = "#56B4E9", color = "black") +
  scale_x_continuous(breaks = 1:length(data_counts)) +
  scale_y_continuous(labels = scales::percent_format(),
                     expand = expansion(mult = c(0, 0.01))) +
  theme_minimal_hgrid(12) +
  labs(title = "Variance explained by each components",
       x = "Component",
       y = "Percentage of variance") +
  theme(plot.title = element_text(hjust = 0.5))
```
