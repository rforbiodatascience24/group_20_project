---
title: "03_augment"
author: Antoine Andréoletti (s242830), Olivier Gaufrès (s243252), Amy Surry (s201902), Lea Skytthe (s203531), Trine Søgaard (s204655)
format:
  html:
    embed-resources: true
editor: visual
---

# Augmenting the data

## Load libraries

```{r}
#| label: 03_load-libraries
#| message: False
#| warning: False

rm(list = ls())

library("tidyverse")
library("biomaRt")
```

## Augment data

Loading the cleaned data

```{r}
#| label: 03_load-data
#| message: false

metadata <- read_csv("../data/02_metadata_clean.csv")
count_data <- read_csv("../data/02_count_data_long.csv")
```

### Metadata

```{r}
#| label: 03_metadata-inspect

metadata |>
  sample_n(size = 5)
```

Removing excluded people from the data set

```{r}
#| label: 03_metadata-remove-excluded

metadata <- metadata |>
  dplyr::filter(disease != "excluded")
```

Converting metadata to a dataframe to set rownames

```{r}
#| label: 03_metadata-convert

metadata <- data.frame(metadata)
row.names(metadata) <- metadata |> 
  pull(source_name)
```

Viewing the cleaned and augmented meta data

```{r}
#| label: 03_metadata-aug-inspect

metadata |>
  sample_n(size = 5)
```

### Count data

Pivot the count data to make some analyses

```{r}
#| label: 03_count_data-pivot

count_data_wide <- count_data |> 
  dplyr::select(c("Name","source_name","NumReads")) |> 
  pivot_wider(names_from = source_name, 
              values_from = NumReads)
```

In case we need normalized counts instead of normal counts, we can create a dataset for it

```{r}
#| label: 03_normalized-count_data-pivot

normalized_count_data_wide <- count_data |> 
  dplyr::select(c("Name","source_name","TPM")) |> 
  pivot_wider(names_from = source_name, values_from = TPM)
```

We only want to include the patients that are present in both meta data and count data. We therefore need to make sure that the rows of the metadata corresponds to the columns of the count data

```{r}
#| label: 03_keeping-common-patients

common_samples <- intersect(colnames(count_data_wide), rownames(metadata))

metadata <- metadata |> 
  filter(source_name %in% common_samples) |> 
  mutate(rank = match(source_name, common_samples)) |> 
  arrange(rank) |> 
  dplyr::select(-rank)

count_data_wide <- count_data_wide |> 
  dplyr::select(c("Name",all_of(common_samples)))

normalized_count_data_wide <- normalized_count_data_wide |> 
  dplyr::select(c("Name",all_of(common_samples)))
```

Saving the augmented metadata file

```{r}
#| label: 03_saving-matadata-aug

write_csv(metadata, 
          file = file.path("../data/03_metadata_aug.csv"))
```

We want only rows that are different from 0

```{r}
#| label: 03_count_data-keeping-non-null-rows

count_data_wide <- count_data_wide |> 
  dplyr::filter(if_all(everything(), ~ . != 0))

normalized_count_data_wide <- normalized_count_data_wide |> 
  dplyr::filter(if_all(everything(), ~ . != 0))
```

Renaming the "Name" column

```{r}
#| label: 03_count_data-renaming-columns

count_data_wide <- count_data_wide |>
  dplyr::rename(transcript_ID = Name)

normalized_count_data_wide <- normalized_count_data_wide |>
  dplyr::rename(transcript_ID = Name)
```

Getting the genes from the transcript IDs

```{r}
#| label: 03_genes_from_IDs
#| message: false

# Set up the Ensembl BioMart connection
ensembl <- useEnsembl(biomart = "genes", 
                      dataset = "hsapiens_gene_ensembl")

# Getting transcript IDs
transcript_ids <- count_data_wide$transcript_ID

result <- getBM(
  attributes = c("ensembl_transcript_id_version", 
                 "ensembl_gene_id", 
                 "hgnc_symbol"),
  filters = "ensembl_transcript_id_version",
  values = transcript_ids,
  mart = ensembl
)
```

Including the gene IDs and HUGO Gene Nomenclature Committee (HGNC) symbols

```{r}
#| label: 03_count_data-add-gene-names

# Renaming "ensembl_transcript_id" in result to mach "transcript_ID" in count_data
result <- result |> 
  dplyr::rename(transcript_ID = ensembl_transcript_id_version)

# Removing any leading and/or trailing spaces
count_data_wide <- count_data_wide |> 
  mutate(transcript_ID = str_trim(transcript_ID))

normalized_count_data_wide <- normalized_count_data_wide |> 
  mutate(transcript_ID = str_trim(transcript_ID))

result <- result |> 
  mutate(transcript_ID = str_trim(transcript_ID))

# Combine result with count_data based on transcript_ID
count_data_combined <- count_data_wide |> 
  left_join(result, by = "transcript_ID")

normalised_count_data_combined <- normalized_count_data_wide |> 
  left_join(result, by = "transcript_ID")
```

Renaming and relocating the new columns

```{r}
#| label: 03_count_data-renaming-new-columns

# for the count data
count_data_combined <- count_data_combined |>
  dplyr::rename(gene_id = ensembl_gene_id,
                gene_symbol = hgnc_symbol)

count_data_combined <- count_data_combined |>
  relocate(gene_id, 
           gene_symbol, 
           .after = transcript_ID)

# for the normalized count data
normalised_count_data_combined <- normalised_count_data_combined |>
  dplyr::rename(gene_id = ensembl_gene_id,
                gene_symbol = hgnc_symbol)

normalised_count_data_combined <- normalised_count_data_combined |>
  dplyr::relocate(gene_id, gene_symbol, .after = transcript_ID)
```

Saving the augmented count_data file

```{r}
#| label: 03_count_data-aug-save

write_csv(count_data_combined, 
          file = file.path("../data/03_count_data_wide_aug.csv"))

write_csv(normalised_count_data_combined, 
          file = file.path("../data/03_normalized_count_data_wide_aug.csv"))
```
