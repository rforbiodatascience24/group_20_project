---
title: "Augment data"
author: Antoine Andréoletti (s242830), Olivier Gaufrès (s243252), Amy Surry (s201902), Lea Skytthe (s203531), Trine Søgaard (s204655)
format:
  html:
    embed-resources: true
editor: visual
---

```{r}
#| echo: false
#| message: false

rm(list = ls())
library("tidyverse")
library("biomaRt")
```

## Augment data

Loading the cleaned data

```{r}
#| message: false

metadata <- read_csv("../data/02_metadata_clean.csv")
count_data <- read_csv("../data/02_count_data_long.csv")
```

### Meta data

```{r}
metadata |>
  sample_n(size = 5)
```

Removing excluded people from the data set

```{r}
metadata <- metadata |>
  dplyr::filter(disease != "excluded")
```

```{r}
metadata <- data.frame(metadata)
row.names(metadata) <- metadata|> pull(source_name)
```

Viewing the cleaned and augmented meta data

```{r}
metadata |>
  sample_n(size = 5)
```

### Count data

Pivot the count data to make some analyses

```{r}
count_data_wide <- count_data |> 
  dplyr::select(c("Name","source_name","NumReads")) |> 
  pivot_wider(names_from = source_name, values_from = NumReads)
```

In case we need normalized counts instead of normal counts, we can create a dataset for it

```{r}

normalized_count_data_wide <- count_data |> 
  dplyr::select(c("Name","source_name","TPM")) |> 
  pivot_wider(names_from = source_name, values_from = TPM)
```

We only want to include the patients that are present in both meta data and count data. We therefore need to make sure that the rows of the metadata corresponds to the columns of the count data

```{r}
common_samples <- intersect(colnames(count_data_wide), rownames(metadata))

metadata <- metadata[common_samples,]
count_data_wide <- count_data_wide[,c("Name",common_samples)]
normalized_count_data_wide <- normalized_count_data_wide[, c("Name",common_samples)]
```

Saving the augmented metadata file

```{r}
if( !file.exists(file.path("../data/03_metadata_aug.csv")) ){
  write_csv(metadata, 
            file = file.path("../data/03_metadata_aug.csv"))
}
```

We want only rows that are different from 0

```{r}
count_data_wide <- count_data_wide |> 
  dplyr::filter(if_all(everything(), ~ . != 0))

normalized_count_data_wide <- normalized_count_data_wide |> 
  dplyr::filter(if_all(everything(), ~ . != 0))
```

Renaming the "Name" column

```{r}
#| message: false
count_data_wide <- count_data_wide |>
  dplyr::rename(transcript_ID = Name)

count_data_wide |>
  sample_n(size = 5)
```

```{r}
#| message: false
normalized_count_data_wide <- normalized_count_data_wide |>
  dplyr::rename(transcript_ID = Name)

normalized_count_data_wide |>
  sample_n(size = 5)
```

Getting the genes from the transcript IDs

```{r}
# Set up the Ensembl BioMart connection
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")

# all(count_data_wide$transcript_ID %in% normalized_count_data_wide$transcript_ID)

# Example list of Ensembl transcript IDs
transcript_ids <- count_data_wide$transcript_ID

result <- getBM(
  attributes = c("ensembl_transcript_id_version", "ensembl_gene_id", "hgnc_symbol"),
  filters = "ensembl_transcript_id_version",
  values = transcript_ids,
  mart = ensembl
)

result
```

Including the gene IDs and HUGO Gene Nomenclature Committee (HGNC) symbols

```{r}
#| warning: false

# Renaming "ensembl_transcript_id" in result to mach "transcript_ID" in count_data
result <- result |> 
  dplyr::rename(transcript_ID = ensembl_transcript_id_version)

# Removing any leading and/or trailing spaces
count_data_wide <- count_data_wide |> 
  dplyr::mutate(transcript_ID = str_trim(transcript_ID))
normalized_count_data_wide <- normalized_count_data_wide |> 
  dplyr::mutate(transcript_ID = str_trim(transcript_ID))

result <- result |> 
  dplyr::mutate(transcript_ID = str_trim(transcript_ID))


# Combine result with count_data based on transcript_ID
count_data_combined <- count_data_wide |> 
  left_join(result, by = "transcript_ID")

normalised_count_data_combined <- normalized_count_data_wide |> 
  left_join(result, by = "transcript_ID")
```

Renaming and relocating the new columns

```{r}
count_data_combined <- count_data_combined |>
  dplyr::rename(gene_id = ensembl_gene_id,
                gene_symbol = hgnc_symbol)

count_data_combined <- count_data_combined |>
  dplyr::relocate(gene_id, gene_symbol, .after = transcript_ID)

# Check the result
count_data_combined |> 
  sample_n(size = 5)
```

```{r}
normalised_count_data_combined <- normalised_count_data_combined |>
  dplyr::rename(gene_id = ensembl_gene_id,
                gene_symbol = hgnc_symbol)

normalised_count_data_combined <- normalised_count_data_combined |>
  dplyr::relocate(gene_id, gene_symbol, .after = transcript_ID)

# Check the result
normalised_count_data_combined |> 
  sample_n(size = 5)
```

Saving the augmented count_data file

```{r}
if( !file.exists(file.path("../data/03_count_data_wide_aug.csv")) ){
  write_csv(count_data_combined, 
            file = file.path("../data/03_count_data_wide_aug.csv"))
}
```

```{r}
if( !file.exists(file.path("../data/03_normalized_count_data_wide_aug.csv")) ){
  write_csv(normalised_count_data_combined, 
            file = file.path("../data/03_normalized_count_data_wide_aug.csv"))
}
```
