---
title: "0X_analysis"
author: Antoine Andréoletti, Olivier Gaufrès, Amy Surry, Lea Skytthe, Trine Søgaard
format:
  html:
    embed-resources: true
editor: visual
---

# Analysis

```{r}
#| label: setup
#| include: false

rm(list=ls())

library("tidyverse")
library("pheatmap")
library("ggrepel")

## DEA libraries
library("DESeq2")

source(file.path("99_proj_func.R"))
```

## Load data

### Load phenotype

```{r}
#| label: load-pheno
#| include: false
#| echo: true

data_pheno <- read.csv("../data/03_metadata_aug.csv")

# We want patients as row names, so we convert the tibble to a dataframe and names the rows
data_pheno <- data.frame(data_pheno) |> 
  column_to_rownames("source_name")

```

### Load counts matrix

```{r}
#| label: load-counts
#| include: false

data_counts.total <- read.csv("../data/03_count_data_wide_aug.csv")


# We want genes as row names, so we convert the tibble to a dataframe and names the rows
data_counts <- data.frame(data_counts.total) |>
  dplyr::mutate(transcript_ID = str_c(transcript_ID, runif(min = 1, max = 100000, n = length(transcript_ID)))) |> 
  column_to_rownames("transcript_ID") |> 
  dplyr::select(-gene_id, -gene_symbol)



colnames(data_counts) <- colnames(data_counts) |> substring(2)


# The output of the mapping algorithm they use is an estimated number of reads mapped to each gene. It is a float while we need an integer. We will then convert it.
data_counts <- data_counts |> 
  mutate(across(where(is.numeric), as.integer))
```

## Differential Expression Analysis

### Using DESeq2

```{r}
#| label: dea-deseq2
#| include: false

dds <- DESeqDataSetFromMatrix(countData = data_counts,
                              colData = data_pheno,
                              design = ~disease)

featureData <- data.frame(gene=rownames(data_counts))
mcols(dds) <- DataFrame(mcols(dds), featureData)

## Adding the reference level (normal)
dds$disease <- relevel(dds$disease, ref = "normal")

## DEA
dds <- DESeq(dds)
res <- results(dds)

gene_symbol.df <- data_counts.total |> dplyr::select(gene_symbol) |> rownames_to_column("transcript_ID")
res <- as.data.frame(res) |> rownames_to_column("transcript_ID") |> left_join(gene_symbol.df, by = "transcript_ID")


#Saving the results
write_csv(as.data.frame(res), file.path("../data/03_DESeq2_results-global.csv"))
```

### PCA

```{r}
#| label: pca-individual
## Transpose the counts matrix to have the PCA for individuals and not gene expression
pca <- prcomp(t(data_counts))

## Proportion of variance
PoV <- pca$sdev^2/sum(pca$sdev^2)
PoV <- PoV * 100
PoV <- str_sub(PoV,1,4)
PC1_t = str_c("PC1 (", PoV[1] , "%)")
PC2_t = str_c("PC2 (", PoV[2] ,"%)")

## Add patients metadata
bind_cols(data_pheno, pca$x) |>  
  ggplot(aes(x=PC1, y=PC2, shape=clinical_information, col=disease, label=individual)) + 
    geom_point() + 
    geom_text_repel() +
    labs(x = PC1_t , y = PC2_t, color = "Disease", shape = "Clinical information") 

ggsave(file.path("../results/0X-pca-plot.pdf"))
```

### Heatmap (all genes)

In order to check if the data create individual clusters (experimental bias) and detect potential outliers.

```{r}
#| label: heatmap-individual

cor.matrix <- cor(data_counts)
annotations <- data_pheno |> dplyr::select(disease, clinical_information)

heatmap.individual <- pheatmap(cor.matrix, 
         annotation_col = annotations,
         main = "Heatmap - All samples")

save_pheatmap_pdf(heatmap.individual, file.path("../results/0X_heatmap-all-samples.pdf"))

## We can see 3 outliers in the heatmap and ACP

```

### Volcano plots

```{r}
#| label: heatmap-individual
#| warning: false

## General analysis
plot_volcano(res, "general", log2(2), 0.05)
```

## Testing now in fasting conditions

```{r}
#| label: dea-deseq2-fasting
#| include: false

data_pheno_fasting <- data_pheno |> 
  dplyr::filter(clinical_information == "fasting")

data_counts_fasting <- data_counts |> 
  dplyr::select(rownames(data_pheno_fasting))

dds <- DESeqDataSetFromMatrix(countData = data_counts_fasting,
                              colData = data_pheno_fasting,
                              design = ~disease)

featureData <- data.frame(gene=rownames(data_counts_fasting))
mcols(dds) <- DataFrame(mcols(dds), featureData)

## Adding the reference level (normal)
dds$disease <- relevel(dds$disease, ref = "normal")

## DEA
dds <- DESeq(dds)
res <- results(dds)

gene_symbol.df <- data_counts.total |> dplyr::select(gene_symbol) |> rownames_to_column("transcript_ID")
res <- as.data.frame(res) |> rownames_to_column("transcript_ID") |> left_join(gene_symbol.df, by = "transcript_ID")


#Saving the results
write_csv(as.data.frame(res), file.path("../data/03_DESeq2_results-fasting.csv"))

plot_volcano(res, "fasting", log2(2), 0.05)
```



## Testing now in postprandial condition

```{r}
#| label: dea-deseq2
#| include: false

data_pheno_postprandial <- data_pheno |> 
  dplyr::filter(clinical_information == "postprandial")

data_counts_postprandial <- data_counts |> 
  dplyr::select(rownames(data_pheno_postprandial))

dds <- DESeqDataSetFromMatrix(countData = data_counts_postprandial,
                              colData = data_pheno_postprandial,
                              design = ~disease)

featureData <- data.frame(gene=rownames(data_counts_postprandial))
mcols(dds) <- DataFrame(mcols(dds), featureData)

## Adding the reference level (normal)
dds$disease <- relevel(dds$disease, ref = "normal")

## DEA
dds <- DESeq(dds)
res <- results(dds)

gene_symbol.df <- data_counts.total |> dplyr::select(gene_symbol) |> rownames_to_column("transcript_ID")
res <- as.data.frame(res) |> rownames_to_column("transcript_ID") |> left_join(gene_symbol.df, by = "transcript_ID")

#Saving the results
write_csv(as.data.frame(res), file.path("../data/03_DESeq2_results-postprandial.csv"))

## Plot the volcano
plot_volcano(res, "postprandial", log2(2), 0.05)
```



## Difference in expression fasting or not cirrhosis

```{r}
data_pheno_cirrhosis <- data_pheno |> 
  dplyr::filter(disease == "cirrhosis of liver")

data_counts_cirrhosis <- data_counts |> 
  dplyr::select(rownames(data_pheno_cirrhosis))

dds <- DESeqDataSetFromMatrix(countData = data_counts_cirrhosis,
                              colData = data_pheno_cirrhosis,
                              design = ~clinical_information)

featureData <- data.frame(gene=rownames(data_counts_cirrhosis))
mcols(dds) <- DataFrame(mcols(dds), featureData)

## DEA
dds <- DESeq(dds)
res <- results(dds)

gene_symbol.df <- data_counts.total |> dplyr::select(gene_symbol) |> rownames_to_column("transcript_ID")
res <- as.data.frame(res) |> rownames_to_column("transcript_ID") |> left_join(gene_symbol.df, by = "transcript_ID")

#Saving the results
write_csv(as.data.frame(res), file.path("../data/03_DESeq2_results-cirrhosis.csv"))

plot_volcano(x=res, title="cirrhosis", fc_cutoff=log2(2), p_cutoff=0.05)
```


## Difference in expression fasting or not normal

```{r}
data_pheno_normal <- data_pheno |> 
  dplyr::filter(disease == "normal")

data_counts_normal <- data_counts |> 
  dplyr::select(rownames(data_pheno_normal))

dds <- DESeqDataSetFromMatrix(countData = data_counts_normal,
                              colData = data_pheno_normal,
                              design = ~clinical_information)

featureData <- data.frame(gene=rownames(data_counts_normal))
mcols(dds) <- DataFrame(mcols(dds), featureData)

## DEA
dds <- DESeq(dds)
res <- results(dds)

gene_symbol.df <- data_counts.total |> dplyr::select(gene_symbol) |> rownames_to_column("transcript_ID")
res <- as.data.frame(res) |> rownames_to_column("transcript_ID") |> left_join(gene_symbol.df, by = "transcript_ID")

#Saving the results
write_csv(as.data.frame(res), file.path("../data/03_DESeq2_results-normal.csv"))


plot_volcano(x=res, title="normal", fc_cutoff=log2(2), p_cutoff=0.05)
```


