```{r}
library("here")
library("tidyverse")
library("pheatmap")
library("DESeq2")
library("tibble")
library("dplyr")

source(file.path("99_proj_func.R"))
```

data load

```{r}

# 1. Load preprocess metadata
metadata <- read.csv("../data/02_metadata_clean.csv")

metadata <- data.frame(metadata) |> 
  column_to_rownames("source_name")

# 2. Load preprocess counts data
data_counts <- read.csv("../data/03_normalized_count_data_wide.csv", check.names = FALSE)

data_counts <- data.frame(data_counts) |>
  column_to_rownames("Name") |>
  mutate(across(where(is.numeric), as.integer))

colnames(data_counts) <- colnames(data_counts) |> substring(2)

# 3. Subset data to only include common samples
common_samples <- intersect(colnames(data_counts), rownames(metadata))

metadata <- metadata[common_samples,]
data_counts <- data_counts[,common_samples]

# We want only raws that are different from 0

data_counts <- data_counts |> 
  filter(if_all(everything(), ~ . != 0))

# Filter both datasets for the common samples


# 4. Filter out genes with zero counts across all samples


# 5. Create DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = data_counts,
                              colData = metadata,
                              design = ~disease)

featureData <- data.frame(gene=rownames(data_counts))
mcols(dds) <- DataFrame(mcols(dds), featureData)

## Adding the reference level (normal)
dds$disease <- relevel(dds$disease, ref = "normal")

## DEA
dds <- DESeq(dds)
res <- results(dds)

#Saving the results
write.csv(res, "../data/05_DESeq2_results.csv")

```

volcano

```{r}
## Adding cutoff
fc_cutoff <- 1
p_cutoff <- 0.05
volcano_data <- tibble(Name = rownames(res),
                       log2FoldChange = res$log2FoldChange,
                       pvalue = res$pvalue,
                       padj = res$padj)

volcano_data <- volcano_data |> 
  dplyr::mutate(gene_type = case_when(log2FoldChange >= fc_cutoff & padj <= 0.05 ~ "Up regulated",
                               log2FoldChange <= -fc_cutoff & padj <= 0.05 ~ "Down regulated",
                               TRUE ~ "Non significant")) 
cols <- c("Up regulated" = "gold", "Down regulated" = "blue", "Non significant" = "darkgrey")



volcano_data |> 
  ggplot(aes(x = log2FoldChange, y = -log10(padj), col=gene_type)) + geom_point() +
  geom_hline(yintercept = -log10(p_cutoff), linetype = "dashed") + 
  geom_vline(xintercept = c(-fc_cutoff, fc_cutoff),
             linetype = "dashed") +
  scale_color_manual(values=cols)+
  labs(
    title= "Volcano plot - log10(Adj-P-Value)",
    colour = "Differencial expression")

ggsave(file.path("../results/0X-volcano-plot-adj-p-val.pdf"))
```

-   Analyse most significantly over/under-expressed genes

```{r}

data_counts_long <- read.csv("../data/02_count_data_long.csv")
metadata <- read.csv("../data/02_metadata_clean.csv")


analysis_data <- volcano_data |>
  left_join(data_counts_long, by = "Name") |>
  left_join(metadata, by = "source_name")


```

stats and correlation

```{r}
# Calculate summary statistics for down-regulated genes
regulated_data <- analysis_data |>
  filter(gene_type != "Non significant") |>
  mutate(across(c(Name, gene_type, sex, disease, clinical_information), as.factor)) |>
  mutate(across(c(age, Length, EffectiveLength, TPM, NumReads), as.integer)) |>
  drop_na()

regulated_summary <- regulated_data |>
  group_by(Name, gene_type) |>
  summarise(n = n()
  )

ggplot(regulated_summary, aes(x = Name, fill = gene_type)) +
  geom_bar(alpha = 0.7, position = "dodge") +   # Use geom_bar() for categorical counts
  labs(title = "Count of Each Gene Present in Significant Gene Regulation",
       x = "Gene Name", y = "Count (n)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity


```

```{r}

# Assuming regulated_data is already filtered and contains only "Up regulated" and "Down regulated"
# Perform the ANOVA on log2FoldChange based on gene_type
regulated_data$gene_type <- as.factor(regulated_data$gene_type)


anova_result <- aov(gene_type ~ sex+disease+clinical_information, data = regulated_data)

# Display the summary of the ANOVA
anova_result

logit_model <- glm(gene_type ~ sex:disease:clinical_information, 
                   data = regulated_data, 
                   family = binomial)  # Binary outcome
summary(logit_model)
```

```{r}
# Correlation between age and log2FoldChange
cor.test(dataset$age, dataset$log2FoldChange, method = "spearman")

# Correlation between TPM and age
cor.test(dataset$TPM, dataset$age, method = "spearman")

```

```{r}

gene_data <- read.csv("../data/02_count_data_long.csv")
metadata <- read.csv("../data/02_metadata_clean.csv")

whole_data <- gene_data |>
  left_join(metadata, by = "source_name")

pca_data <- whole_data |>
  select(
    # Variables of interrest
    c(Name, source_name, EffectiveLength, TPM, NumReads, age, sex, 
      disease, clinical_information)) |>
  mutate(across(c(source_name, sex, disease, clinical_information),
                as.factor))

PCA <-pca_data |>
  select(c(EffectiveLength, TPM, NumReads, age)) |>
  # Perform PCA with scaled variables
  prcomp(scale = TRUE) |>
  tidy(matrix = "eigenvalues") |>
  augment(PCA_data) 
```
